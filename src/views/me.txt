
<!-- <script setup lang="ts">
import { ref, onMounted, computed } from "vue";
import { useRoute, useRouter } from "vue-router";
import { useCustomerStore } from "../store/useCustomerStore";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

const route = useRoute();
const router = useRouter();
const customerStore = useCustomerStore();

// Reactive references for the customer data and loading state
const customerToEdit = ref<any | null>(null);
const isEditEnabled = ref(false);
const isLoading = ref(true); // Loading state to show until data is fetched
const isError = ref(false); // Error state for handling customer not found

// Fetch customer details based on the route param 'id'
onMounted(async () => {
  const customerId = route.params.id as string;
  const customer = customerStore.customers.find(cust => cust.id === customerId);

  if (customer) {
    customerToEdit.value = { ...customer };
    isEditEnabled.value = false; // Initially disable inputs
    isLoading.value = false; // Set loading to false when data is fetched
  } else {
    isLoading.value = false; // Stop loading
    isError.value = true; // Set error state when customer not found
  }
});

// Update customer when form is submitted
const updateCustomer = () => {
  if (customerToEdit.value) {
    customerStore.updateCustomer(customerToEdit.value);
    router.push('/'); // Navigate back to customer list or wherever appropriate
  }
};

// Cancel editing and navigate back
const cancelEdit = () => {
  router.back();
};

</script>

<template>
  <div class="p-6">
    <h3 class="text-lg font-medium mb-4">Edit Customer</h3>

    <!-- Show loading state -->
    <div v-if="isLoading" class="text-center">Loading...</div>

    <!-- Show error state -->
    <div v-if="isError" class="text-red-500 text-center">
      Customer not found. Please try again.
    </div>

    <!-- Show form when customer data is fetched -->
    <form v-if="!isLoading && !isError" @submit.prevent="updateCustomer" class="space-y-4">
      <Input
        id="firstName"
        type="text"
        placeholder="First Name"
        v-model="customerToEdit.firstName"
        :disabled="!isEditEnabled"
      />
      <Input
        id="lastName"
        type="text"
        placeholder="Last Name"
        v-model="customerToEdit.lastName"
        :disabled="!isEditEnabled"
      />
      <Input
        id="email"
        type="email"
        placeholder="Email"
        v-model="customerToEdit.email"
        :disabled="!isEditEnabled"
      />
      <Input
        id="phoneNumber"
        type="text"
        placeholder="Phone Number"
        v-model="customerToEdit.phoneNumber"
        :disabled="!isEditEnabled"
      />
      <Input
        id="state"
        type="text"
        placeholder="State"
        v-model="customerToEdit.state"
        :disabled="!isEditEnabled"
      />
      <div class="mt-4">
        <Button @click="isEditEnabled = !isEditEnabled">
          {{ isEditEnabled ? "Update" : "Edit" }}
        </Button>
        <Button variant="outline" @click.prevent="cancelEdit">Cancel</Button>
      </div>
    </form>
  </div>
</template> -->
